name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools>=78.1.1
        pip install -r requirements/dev.txt

    - name: Install pre-commit
      run: |
        pip install pre-commit
        pre-commit install --install-hooks

    - name: Cache pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ env.PYTHON_VERSION }}-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Run pre-commit (first pass)
      run: pre-commit run --all-files
      continue-on-error: true

    - name: Commit formatting changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add -A
        if ! git diff --cached --exit-code; then
          git commit -m "Auto-fix: Apply pre-commit formatting changes" -m "Co-Authored-By: Claude <noreply@anthropic.com>"
          echo "Committed formatting changes"
        fi

    - name: Run pre-commit (final check)
      run: pre-commit run --all-files

  test:
    name: Test Suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_django_saas
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools>=78.1.1
        pip install -r requirements/dev.txt

    - name: Set up environment variables
      run: |
        echo "DJANGO_SETTINGS_MODULE=apps.config.settings.test" >> $GITHUB_ENV
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_django_saas" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "CELERY_TASK_ALWAYS_EAGER=True" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV

    - name: Create static directory
      run: mkdir -p static

    - name: Create missing migrations
      run: |
        # Debug: Show current migration status
        echo "=== Checking migration status ==="
        python manage.py showmigrations || echo "showmigrations failed"

        # Create migrations for any apps that need them
        echo "=== Creating migrations ==="
        python manage.py makemigrations --noinput

        # Show what migrations were created
        echo "=== Migration status after makemigrations ==="
        python manage.py showmigrations || echo "showmigrations failed after makemigrations"

    - name: Run migrations
      run: |
        # Apply all migrations including Django's built-in apps
        echo "=== Running migrations ==="
        python manage.py migrate --noinput --verbosity=2

    - name: Run tests with coverage
      run: |
        pytest --cov=apps --cov-report=xml --cov-report=term-missing --cov-fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  type-check:
    name: Type Check (mypy)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools>=78.1.1
        pip install -r requirements/dev.txt

    - name: Run mypy
      run: mypy apps/

  security:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools>=78.1.1
        pip install -r requirements/dev.txt
        pip install bandit[toml] pip-audit

    - name: Run bandit security check
      run: bandit -c pyproject.toml -r apps/

    - name: Run pip-audit
      run: |
        # Audit installed packages including our requirements
        pip-audit --requirement requirements/dev.txt

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: django-saas-boilerplate:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm django-saas-boilerplate:latest python --version
        docker run --rm django-saas-boilerplate:latest python manage.py check

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test, type-check]

    steps:
    - uses: actions/checkout@v4

    - name: Create .env file
      run: |
        cat << EOF > .env
        DJANGO_SECRET_KEY=test-secret-key-for-integration
        DEBUG=True
        DATABASE_URL=postgres://django:django@postgres:5432/django_saas
        REDIS_URL=redis://redis:6379/0
        CELERY_BROKER_URL=redis://redis:6379/1
        EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
        ALLOWED_HOSTS=localhost,127.0.0.1
        EOF

    - name: Start services with Docker Compose
      run: |
        docker-compose -f compose/docker-compose.yml up -d postgres redis
        sleep 10

    - name: Run integration tests
      run: |
        # Test database connection
        docker-compose -f compose/docker-compose.yml exec -T postgres pg_isready -U django -d django_saas

        # Test Redis connection
        docker-compose -f compose/docker-compose.yml exec -T redis redis-cli ping

    - name: Cleanup
      if: always()
      run: docker-compose -f compose/docker-compose.yml down -v

  deployment-check:
    name: Deployment Check
    runs-on: ubuntu-latest
    needs: [lint, test, type-check, docker-build]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools>=78.1.1
        pip install -r requirements/dev.txt

    - name: Check deployment settings
      run: |
        export DJANGO_SETTINGS_MODULE=apps.config.settings.prod
        export SECRET_KEY=fake-secret-for-check
        export DATABASE_URL=sqlite:///fake.db
        export ALLOWED_HOSTS=example.com
        python manage.py check --deploy
