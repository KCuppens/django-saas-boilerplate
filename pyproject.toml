[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "django-saas-boilerplate"
version = "0.1.0"
description = "Production-ready Django SaaS boilerplate with async emails, feature flags, and RBAC"
authors = [{name = "Django SaaS Boilerplate", email = "noreply@example.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "setuptools>=78.1.1",  # Security fix for PYSEC-2022-43012, PYSEC-2025-49
    "django>=4.2,<5.0",
    "djangorestframework>=3.14.0",
    "django-allauth>=0.57.0",
    "django-environ>=0.11.0",
    "django-waffle>=4.1.0",
    "django-cors-headers>=4.3.0",
    "drf-spectacular>=0.26.5",
    "celery[redis]>=5.3.0",
    "redis>=5.0.0",
    "psycopg[binary]>=3.1.0",
    "pillow>=10.0.0",
    "boto3>=1.34.0",
    "sentry-sdk[django]>=1.38.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-exporter-otlp>=1.21.0",
    "opentelemetry-instrumentation-django>=0.42b0",
    "opentelemetry-instrumentation-psycopg2>=0.42b0",
    "opentelemetry-instrumentation-redis>=0.42b0",
    "gunicorn>=21.2.0",
    "whitenoise>=6.6.0",
    "psutil>=5.9.0",
    "python-json-logger>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-django>=4.7.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
    "pre-commit>=3.5.0",
    "ruff>=0.1.6",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "bandit>=1.7.5",
    "pip-audit>=2.6.0",
    "django-stubs[compatible-mypy]>=4.2.0",
    "djangorestframework-stubs[compatible-mypy]>=3.14.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["apps*"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise-without-from-inside-except (non-critical style preference)
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"*/settings/*.py" = ["F405", "F403"]
"apps/config/settings/*.py" = ["F405", "F403"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
default_section = "THIRDPARTY"
known_first_party = ["apps"]
known_django = ["django"]
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

[tool.django-stubs]
django_settings_module = "apps.config.settings.test"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "apps.config.settings.test"
python_files = ["tests.py", "test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--tb=short --strict-markers --disable-warnings"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["apps"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "manage.py",
    "*/settings/*",
    "*/config/wsgi.py",
    "*/config/asgi.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.bandit]
exclude_dirs = ["tests", "*/migrations/*"]
skips = ["B101", "B601"]
